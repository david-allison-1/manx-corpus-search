@using CorpusSearch.Model.Dictionary;
@using CorpusSearch.Service.Dictionaries
@{
    ViewData["Title"] = "Index";
}

<script>
    function search() {
        let query = document.getElementById("searchInput").value;
        window.location.href = `/Dictionary/Cregeen/${query}`;
        return false;
    }
</script>

<h2>Cregeen's Dictionary</h2>

<input type="text" id="searchInput" onkeyup="if (event.keyCode == 13) { search() }" style="width:90%" value="@ViewData["query"]?.ToString()" />
<input type="submit" id="searchButton" onclick="search()" value="Search" />
<br />

<script>
    var input = document.getElementById("searchInput");
    input.focus();
    input.select();
</script>

<div style="text-align:center">
    @{
        // Display large "A-Y" buttons
        foreach (var k in CregeenDictionaryService.LetterLookup.Keys.Where(x => x != ' '))
        {
            <a style="font-size:xx-large;margin-left:5px;margin-right:5px" href="/Dictionary/Cregeen/@k">@k</a>
        }
        <br />
    }
</div>

<hr />

@{
    bool renderRecursive = true;
    void RenderEntry(CregeenEntry entry, int depth)
    {
        var elDepth = depth * 30 + "px";
        <p>
            @* Non-breaking hyphen doesn't appear on macOS *@
            <span style="margin-left: @elDepth;" class="word"> @Html.Raw(entry.HeadingHtml.Replace("&#8209;", "-"))</span>;
            <span class="entry"> @Html.Raw(entry.EntryHtml.Replace("&#8209;", "-"))</span>
        </p>
        if (!renderRecursive)
        {
            return;
        }
        foreach (var child in entry.SafeChildren)
        {
            RenderEntry(child, depth + 1);
        }

    }

    var entries = CregeenDictionaryService.GetEntries();

    var dict = CregeenDictionaryService.LetterLookup;

    IEnumerable<CregeenEntry> search;
    var query = ViewData["query"]?.ToString();
    if (!CregeenDictionaryService.IsValidSearch(query))
    {
        query = "A";
    }

    int entryCount = 0;
    if (query.Length == 1)
    {
        var start = char.ToUpperInvariant(query[0]);
        var end = (char)(start + 1);

        if (end == 'X') { end = 'Y'; }
        if (!dict.ContainsKey(end)) { end = ' '; }

        search = entries.SkipWhile(x => x.Words.First() != dict[start]).TakeWhile(x => x.Words.First() != dict[end]);
    }
    else
    {
        search = CregeenDictionaryService.FuzzySearch(query, entries);

        entryCount = search.Count();
        renderRecursive = false;
    }

    if (entryCount != 0)
    {
        string res = entryCount == 1 ? "result" : "results";
        <p>@entryCount @res</p>
    }


    foreach (var entry in search)
    {
        RenderEntry(entry, 0);
        <hr />
    }

    if (!search.Any())
    {
        <p>No results</p>
    }
}